// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15] , out=notIns15 );
    Mux16(a= aluOut, b= instruction, sel= notIns15, out[15]=aregIn15, out[0..14]=aregIn);
    Not(in= aregIn15, out= notaregIn15);
    Or(a= notaregIn15, b= instruction[5], out= aload);
    ARegister(in[15]=aregIn15, in[0..14]= aregIn, load=aload , out=aregOut, out[0..14]=addressM);
    Mux16(a= aregOut, b= inM, sel= instruction[12], out= muxAM);
    DRegister(in= aluOut, load= instruction[4], out= dregOut);
    ALU(x= dregOut, y= muxAM, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= aluOut, zr= zr, ng= ng);
    PC(in= aregOut, load= pcload, inc= true, reset= reset, out[0..14]= pc);
    
    //PC load
    And(a= instruction[2], b= ng, out= JLT);
    And(a= instruction[1], b= zr, out= JEQ);

    Or(a= JLT, b= JEQ, out= JLE);

    Not(in= zr, out= notzr);
    Not(in= ng, out= notng);

    And(a= notzr, b= notng, out= gt);

    And(a= instruction[0], b= gt, out= JGT);

    Or(a= JGT, b= JEQ, out= JGE);

    And(a= instruction[2], b= instruction[1], out= j1Andj2);
    And(a= j1Andj2, b= instruction[0], out= JMP);

    Or8Way(in[0]= JLT, in[1]= JMP, in[2]=JLT, in[3]= JGT, in[4]= JGE, in[5]= JLE, out= pcload);

}